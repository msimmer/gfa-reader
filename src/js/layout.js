Reader.prototype.Layout = (function() {
  var frame, nav, pos;

  pos = 0;

  frame = null;

  nav = null;

  function Layout(options) {
    if (options == null) {
      options = {};
    }
  }

  Layout.prototype.parent = function(elem, attrs) {
    return $("<" + elem + " />").attr(attrs);
  };

  Layout.prototype.child = function(elem, attrs, props) {
    var $elem, callback, key, val;
    $elem = $("<" + elem + " />").attr(attrs);
    if (props) {
      for (key in props) {
        val = props[key];
        if (typeof key === 'function') {
          callback = key;
        } else if (typeof $.fn[key] === 'function') {
          callback = $.fn[key];
        }
        callback.call($elem, val);
      }
    }
    return $elem;
  };

  Layout.prototype.add = function(elem, parent) {
    parent.append(elem);
    return elem;
  };

  Layout.prototype.build = function(data, callback, parentId, navId) {
    var childAttrs, i, index, item, len, parentAttrs, ref;
    for (index = i = 0, len = data.length; i < len; index = ++i) {
      item = data[index];
      pos += 1;
      parentAttrs = {
        id: item.id,
        'data-article': pos
      };
      childAttrs = {
        'data-label': item.navLabel,
        'data-src': item.src
      };
      frame = $("#" + parentId);
      frame = this.add(this.parent('article', parentAttrs), frame);
      this.add(this.child('section', childAttrs), frame);
      nav = $("#doc-nav ol");
      nav = this.add(this.parent('li', {}), nav);
      this.add(this.child('a', {
        'href': '#',
        'class': 'doc-link',
        'data-link': item.id
      }, {
        'text': item.navLabel
      }), nav);
      callback(item.src, item.id);
      if ((ref = item.navPoint) != null ? ref.length : void 0) {
        frame = frame;
        nav = nav;
        this.build(item.navPoint, callback, frame, navId);
      }
    }
    return item;
  };

  Layout.prototype.render = function(doc, id) {
    return $("#" + id).append(doc);
  };

  return Layout;

})();

//# sourceMappingURL=data:application/json;base64,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QUksRUFBTixDQUFXLENBQUMsTUFBWixDQUFtQixHQUFuQjtFQURNIiwiZmlsZSI6ImxheW91dC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFJlYWRlcjo6TGF5b3V0XG5cbiAgcG9zICAgPSAwXG4gIGZyYW1lID0gbnVsbFxuICBuYXYgICA9IG51bGxcblxuICBjb25zdHJ1Y3RvcjogKG9wdGlvbnMgPSB7fSkgLT5cblxuICBwYXJlbnQ6IChlbGVtLCBhdHRycykgLT5cbiAgICByZXR1cm4gJChcIjwje2VsZW19IC8+XCIpLmF0dHIoYXR0cnMpXG5cbiAgY2hpbGQ6IChlbGVtLCBhdHRycywgcHJvcHMpIC0+XG4gICAgJGVsZW0gPSAkKFwiPCN7ZWxlbX0gLz5cIikuYXR0cihhdHRycylcbiAgICBpZiBwcm9wc1xuICAgICAgZm9yIGtleSwgdmFsIG9mIHByb3BzXG4gICAgICAgIGlmIHR5cGVvZiBrZXkgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgIGNhbGxiYWNrID0ga2V5XG4gICAgICAgIGVsc2UgaWYgdHlwZW9mICQuZm5ba2V5XSA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgY2FsbGJhY2sgPSAkLmZuW2tleV1cbiAgICAgICAgY2FsbGJhY2suY2FsbCgkZWxlbSwgdmFsKVxuICAgIHJldHVybiAkZWxlbVxuXG4gIGFkZDogKGVsZW0sIHBhcmVudCktPlxuICAgIHBhcmVudC5hcHBlbmQoZWxlbSlcbiAgICByZXR1cm4gZWxlbVxuXG4gIGJ1aWxkOiAoZGF0YSwgY2FsbGJhY2ssIHBhcmVudElkLCBuYXZJZCktPlxuICAgIGZvciBpdGVtLCBpbmRleCBpbiBkYXRhXG4gICAgICBwb3MrPTFcbiAgICAgIHBhcmVudEF0dHJzID1cbiAgICAgICAgaWQ6aXRlbS5pZFxuICAgICAgICAnZGF0YS1hcnRpY2xlJzpwb3NcbiAgICAgIGNoaWxkQXR0cnMgPVxuICAgICAgICAnZGF0YS1sYWJlbCc6aXRlbS5uYXZMYWJlbFxuICAgICAgICAnZGF0YS1zcmMnOml0ZW0uc3JjXG5cbiAgICAgIGZyYW1lID0gJChcIiMje3BhcmVudElkfVwiKVxuICAgICAgZnJhbWUgPSBAYWRkKEBwYXJlbnQoJ2FydGljbGUnLCBwYXJlbnRBdHRycyksIGZyYW1lKVxuICAgICAgQGFkZChAY2hpbGQoJ3NlY3Rpb24nLCBjaGlsZEF0dHJzKSwgZnJhbWUpXG5cbiAgICAgIG5hdiA9ICQoXCIjZG9jLW5hdiBvbFwiKVxuICAgICAgbmF2ID0gQGFkZChAcGFyZW50KCdsaScsIHt9KSwgbmF2KVxuICAgICAgQGFkZChAY2hpbGQoJ2EnLCB7XG4gICAgICAgICAgJ2hyZWYnOicjJ1xuICAgICAgICAgICdjbGFzcyc6J2RvYy1saW5rJ1xuICAgICAgICAgICdkYXRhLWxpbmsnOiBpdGVtLmlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAndGV4dCc6aXRlbS5uYXZMYWJlbFxuICAgICAgICB9KSwgbmF2KVxuXG4gICAgICAjIGNhbGxiYWNrIGdldHMgYW5kIHJlbmRlcnMgbG9hZGluZyBodG1sIHBhZ2VzLCBkcm9wcGluZyB0aGVtIGludG8gdGhlXG4gICAgICAjIGFwcHJvcHJpYXRlIGRvbSBlbGVtZW50c1xuICAgICAgI1xuICAgICAgY2FsbGJhY2soaXRlbS5zcmMsIGl0ZW0uaWQpXG5cbiAgICAgIGlmIGl0ZW0ubmF2UG9pbnQ/Lmxlbmd0aFxuICAgICAgICBmcmFtZSA9IGZyYW1lXG4gICAgICAgIG5hdiA9IG5hdlxuICAgICAgICBAYnVpbGQoaXRlbS5uYXZQb2ludCwgY2FsbGJhY2ssIGZyYW1lLCBuYXZJZClcblxuICAgIHJldHVybiBpdGVtXG5cbiAgcmVuZGVyOiAoZG9jLCBpZCkgLT5cbiAgICAkKFwiIyN7aWR9XCIpLmFwcGVuZChkb2MpXG5cbiJdfQ==
