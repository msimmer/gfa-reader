Reader.prototype.Layout = (function() {
  function Layout(options) {
    this.options = options != null ? options : {};
    this.pos = 0;
    this.frame = null;
  }

  Layout.prototype.parent = function(elem, attrs) {
    return $("<" + elem + " />").attr(attrs);
  };

  Layout.prototype.child = function(elem, attrs, props) {
    var $elem, callback, key, val;
    $elem = $("<" + elem + " />").attr(attrs);
    if (props) {
      for (key in props) {
        val = props[key];
        if (typeof key === 'function') {
          callback = key;
        } else if (typeof $.fn[key] === 'function') {
          callback = $.fn[key];
        }
        callback.call($elem, val);
      }
    }
    return $elem;
  };

  Layout.prototype.add = function(elem, parent) {
    parent.append(elem);
    return elem;
  };

  Layout.prototype.build = function(data, callback, parentId, navId) {
    var childAttrs, frame, i, index, item, len, nav, parentAttrs, ref;
    for (index = i = 0, len = data.length; i < len; index = ++i) {
      item = data[index];
      this.pos += 1;
      parentAttrs = {
        id: item.id,
        'data-article': this.pos
      };
      childAttrs = {
        'data-label': item.navLabel,
        'data-src': item.src
      };
      this.frame = $("#" + parentId);
      frame = this.add(this.parent('article', parentAttrs), this.frame);
      this.add(this.child('section', childAttrs), frame);
      this.nav = $("#doc-nav ol");
      nav = this.add(this.parent('li', {}), this.nav);
      this.add(this.child('a', {
        'href': '#',
        'class': 'doc-link',
        'data-link': item.id
      }, {
        'text': item.navLabel
      }), nav);
      callback(item.src, item.id);
      if ((ref = item.navPoint) != null ? ref.length : void 0) {
        this.frame = frame;
        this.nav = nav;
        this.build(item.navPoint, callback, this.frame, navId);
      }
    }
    return item;
  };

  Layout.prototype.render = function(doc, id) {
    return $("#" + id).append(doc);
  };

  return Layout;

})();

//# sourceMappingURL=data:application/json;base64,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QyxLQUF4QyxFQUhGOztBQTVCRjtBQWlDQSxXQUFPO0VBbENGOzttQkFvQ1AsTUFBQSxHQUFRLFNBQUMsR0FBRCxFQUFNLEVBQU47V0FDTixDQUFBLENBQUUsR0FBQSxHQUFJLEVBQU4sQ0FBVyxDQUFDLE1BQVosQ0FBbUIsR0FBbkI7RUFETSIsImZpbGUiOiJsYXlvdXQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBSZWFkZXI6OkxheW91dFxuXG4gIGNvbnN0cnVjdG9yOiAoQG9wdGlvbnMgPSB7fSkgLT5cbiAgICBAcG9zID0gMFxuICAgIEBmcmFtZSA9IG51bGxcblxuICBwYXJlbnQ6IChlbGVtLCBhdHRycykgLT5cbiAgICByZXR1cm4gJChcIjwje2VsZW19IC8+XCIpLmF0dHIoYXR0cnMpXG5cbiAgY2hpbGQ6IChlbGVtLCBhdHRycywgcHJvcHMpIC0+XG4gICAgJGVsZW0gPSAkKFwiPCN7ZWxlbX0gLz5cIikuYXR0cihhdHRycylcbiAgICBpZiBwcm9wc1xuICAgICAgZm9yIGtleSwgdmFsIG9mIHByb3BzXG4gICAgICAgIGlmIHR5cGVvZiBrZXkgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgIGNhbGxiYWNrID0ga2V5XG4gICAgICAgIGVsc2UgaWYgdHlwZW9mICQuZm5ba2V5XSA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgY2FsbGJhY2sgPSAkLmZuW2tleV1cbiAgICAgICAgY2FsbGJhY2suY2FsbCgkZWxlbSwgdmFsKVxuICAgIHJldHVybiAkZWxlbVxuXG4gIGFkZDogKGVsZW0sIHBhcmVudCktPlxuICAgIHBhcmVudC5hcHBlbmQoZWxlbSlcbiAgICByZXR1cm4gZWxlbVxuXG4gIGJ1aWxkOiAoZGF0YSwgY2FsbGJhY2ssIHBhcmVudElkLCBuYXZJZCktPlxuICAgIGZvciBpdGVtLCBpbmRleCBpbiBkYXRhXG4gICAgICBAcG9zKz0xXG4gICAgICBwYXJlbnRBdHRycyA9XG4gICAgICAgIGlkOml0ZW0uaWRcbiAgICAgICAgJ2RhdGEtYXJ0aWNsZSc6QHBvc1xuICAgICAgY2hpbGRBdHRycyA9XG4gICAgICAgICdkYXRhLWxhYmVsJzppdGVtLm5hdkxhYmVsXG4gICAgICAgICdkYXRhLXNyYyc6aXRlbS5zcmNcblxuICAgICAgQGZyYW1lID0gJChcIiMje3BhcmVudElkfVwiKVxuICAgICAgZnJhbWUgPSBAYWRkKEBwYXJlbnQoJ2FydGljbGUnLCBwYXJlbnRBdHRycyksIEBmcmFtZSlcbiAgICAgIEBhZGQoQGNoaWxkKCdzZWN0aW9uJywgY2hpbGRBdHRycyksIGZyYW1lKVxuXG4gICAgICBAbmF2ID0gJChcIiNkb2MtbmF2IG9sXCIpXG4gICAgICBuYXYgPSBAYWRkKEBwYXJlbnQoJ2xpJywge30pLCBAbmF2KVxuICAgICAgQGFkZChAY2hpbGQoJ2EnLCB7XG4gICAgICAgICAgJ2hyZWYnOicjJ1xuICAgICAgICAgICdjbGFzcyc6J2RvYy1saW5rJ1xuICAgICAgICAgICdkYXRhLWxpbmsnOiBpdGVtLmlkXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAndGV4dCc6aXRlbS5uYXZMYWJlbFxuICAgICAgICB9KSwgbmF2KVxuXG4gICAgICAjIGNhbGxiYWNrIGdldHMgYW5kIHJlbmRlcnMgbG9hZGluZyBodG1sIHBhZ2VzLCBkcm9wcGluZyB0aGVtIGludG8gdGhlXG4gICAgICAjIGFwcHJvcHJpYXRlIGRvbSBlbGVtZW50c1xuICAgICAgI1xuICAgICAgY2FsbGJhY2soaXRlbS5zcmMsIGl0ZW0uaWQpXG5cbiAgICAgIGlmIGl0ZW0ubmF2UG9pbnQ/Lmxlbmd0aFxuICAgICAgICBAZnJhbWUgPSBmcmFtZVxuICAgICAgICBAbmF2ID0gbmF2XG4gICAgICAgIEBidWlsZChpdGVtLm5hdlBvaW50LCBjYWxsYmFjaywgQGZyYW1lLCBuYXZJZClcblxuICAgIHJldHVybiBpdGVtXG5cbiAgcmVuZGVyOiAoZG9jLCBpZCkgLT5cbiAgICAkKFwiIyN7aWR9XCIpLmFwcGVuZChkb2MpXG5cbiJdfQ==
