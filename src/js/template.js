Reader.prototype.Template = (function() {
  function Template(options) {
    var flags, pattern, ref, ref1, ref2, ref3, token;
    this.options = options != null ? options : {};
    token = {
      start: ((ref = this.options.token) != null ? ref.start : void 0) || '{{',
      end: ((ref1 = this.options.token) != null ? ref1.end : void 0) || '}}',
      sep: ((ref2 = this.options.token) != null ? ref2.sep : void 0) || '\\s',
      div: ((ref3 = this.options.token) != null ? ref3.div : void 0) || '\\|'
    };
    flags = '';
    pattern = "" + token.start + token.sep + "([^" + token.sep + "]+?)" + token.sep + token.div + token.sep + "([^" + token.sep + "]+?)" + token.sep + token.end;
    this.regex = new RegExp(pattern, flags);
  }

  Template.prototype.titleCase = function(str) {
    var tmp;
    tmp = str.split('');
    tmp[0] = tmp[0].toUpperCase();
    return tmp = tmp.join('');
  };

  Template.prototype.parse = function(str, abspath) {
    var asset, dir, elem, match, path, type;
    while ((match = this.regex.exec(str)) !== null) {
      asset = match[1];
      type = match[2];
      console.log(type);
      dir = type === 'audio' || type === 'video' ? 'misc' : type;
      path = "" + abspath + (this.titleCase(dir)) + "/" + asset;
      elem = null;
      if (type === 'images') {
        elem = "<img alt=\"" + asset + "\" src=\"" + path + "\"/>";
      } else if (type === 'audio') {
        elem = "<audio src=\"" + path + "\" controls=\"controls\" preload=\"none\"></audio>";
      }
      str = str.replace(match[0], elem);
    }
    return str;
  };

  return Template;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBsYXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBTSxNQUFNLENBQUEsU0FBRSxDQUFBO0VBRUMsa0JBQUMsT0FBRDtBQUVYLFFBQUE7SUFGWSxJQUFDLENBQUEsNEJBQUQsVUFBVztJQUV2QixLQUFBLEdBQ0U7TUFBQSxLQUFBLDJDQUFzQixDQUFFLGVBQWhCLElBQXlCLElBQWpDO01BQ0EsR0FBQSw2Q0FBc0IsQ0FBRSxhQUFoQixJQUF1QixJQUQvQjtNQUVBLEdBQUEsNkNBQXNCLENBQUUsYUFBaEIsSUFBdUIsS0FGL0I7TUFHQSxHQUFBLDZDQUFzQixDQUFFLGFBQWhCLElBQXVCLEtBSC9COztJQUlGLEtBQUEsR0FBUTtJQUNSLE9BQUEsR0FBVSxFQUFBLEdBQUcsS0FBSyxDQUFDLEtBQVQsR0FDRyxLQUFLLENBQUMsR0FEVCxHQUNhLEtBRGIsR0FFTSxLQUFLLENBQUMsR0FGWixHQUVnQixNQUZoQixHQUdHLEtBQUssQ0FBQyxHQUhULEdBSUcsS0FBSyxDQUFDLEdBSlQsR0FLRyxLQUFLLENBQUMsR0FMVCxHQUthLEtBTGIsR0FNTSxLQUFLLENBQUMsR0FOWixHQU1nQixNQU5oQixHQU9HLEtBQUssQ0FBQyxHQVBULEdBUUcsS0FBSyxDQUFDO0lBRW5CLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxNQUFBLENBQU8sT0FBUCxFQUFnQixLQUFoQjtFQWxCRjs7cUJBb0JiLFNBQUEsR0FBVyxTQUFDLEdBQUQ7QUFDVCxRQUFBO0lBQUEsR0FBQSxHQUFNLEdBQUcsQ0FBQyxLQUFKLENBQVUsRUFBVjtJQUNOLEdBQUksQ0FBQSxDQUFBLENBQUosR0FBUyxHQUFJLENBQUEsQ0FBQSxDQUFFLENBQUMsV0FBUCxDQUFBO1dBQ1QsR0FBQSxHQUFNLEdBQUcsQ0FBQyxJQUFKLENBQVMsRUFBVDtFQUhHOztxQkFLWCxLQUFBLEdBQU8sU0FBQyxHQUFELEVBQU0sT0FBTjtBQUNMLFFBQUE7QUFBQSxXQUFNLENBQUMsS0FBQSxHQUFRLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFZLEdBQVosQ0FBVCxDQUFBLEtBQThCLElBQXBDO01BRUUsS0FBQSxHQUFRLEtBQU0sQ0FBQSxDQUFBO01BQ2QsSUFBQSxHQUFPLEtBQU0sQ0FBQSxDQUFBO01BRWIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFaO01BQ0EsR0FBQSxHQUFTLElBQUEsS0FBUSxPQUFSLElBQW1CLElBQUEsS0FBUSxPQUE5QixHQUEyQyxNQUEzQyxHQUF1RDtNQUM3RCxJQUFBLEdBQU8sRUFBQSxHQUFHLE9BQUgsR0FBWSxDQUFDLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBWCxDQUFELENBQVosR0FBNkIsR0FBN0IsR0FBZ0M7TUFDdkMsSUFBQSxHQUFPO01BRVAsSUFBRyxJQUFBLEtBQVEsUUFBWDtRQUNFLElBQUEsR0FBTyxhQUFBLEdBQWMsS0FBZCxHQUFvQixXQUFwQixHQUErQixJQUEvQixHQUFvQyxPQUQ3QztPQUFBLE1BRUssSUFBRyxJQUFBLEtBQVEsT0FBWDtRQUNILElBQUEsR0FBTyxlQUFBLEdBQWdCLElBQWhCLEdBQXFCLHFEQUR6Qjs7TUFHTCxHQUFBLEdBQU0sR0FBRyxDQUFDLE9BQUosQ0FBWSxLQUFNLENBQUEsQ0FBQSxDQUFsQixFQUFzQixJQUF0QjtJQWZSO0FBaUJBLFdBQU87RUFsQkYiLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBSZWFkZXI6OlRlbXBsYXRlXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucyA9IHt9KSAtPlxuXG4gICAgdG9rZW4gPVxuICAgICAgc3RhcnQgOiBAb3B0aW9ucy50b2tlbj8uc3RhcnQgb3IgJ3t7J1xuICAgICAgZW5kICAgOiBAb3B0aW9ucy50b2tlbj8uZW5kIG9yICd9fSdcbiAgICAgIHNlcCAgIDogQG9wdGlvbnMudG9rZW4/LnNlcCBvciAnXFxcXHMnXG4gICAgICBkaXYgICA6IEBvcHRpb25zLnRva2VuPy5kaXYgb3IgJ1xcXFx8J1xuICAgIGZsYWdzID0gJydcbiAgICBwYXR0ZXJuID0gXCIje3Rva2VuLnN0YXJ0fVxcXG4gICAgICAgICAgICAgICAje3Rva2VuLnNlcH1cXFxuICAgICAgICAgICAgICAgKFteI3t0b2tlbi5zZXB9XSs/KVxcXG4gICAgICAgICAgICAgICAje3Rva2VuLnNlcH1cXFxuICAgICAgICAgICAgICAgI3t0b2tlbi5kaXZ9XFxcbiAgICAgICAgICAgICAgICN7dG9rZW4uc2VwfVxcXG4gICAgICAgICAgICAgICAoW14je3Rva2VuLnNlcH1dKz8pXFxcbiAgICAgICAgICAgICAgICN7dG9rZW4uc2VwfVxcXG4gICAgICAgICAgICAgICAje3Rva2VuLmVuZH1cIlxuXG4gICAgQHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncylcblxuICB0aXRsZUNhc2U6IChzdHIpIC0+XG4gICAgdG1wID0gc3RyLnNwbGl0KCcnKVxuICAgIHRtcFswXSA9IHRtcFswXS50b1VwcGVyQ2FzZSgpXG4gICAgdG1wID0gdG1wLmpvaW4oJycpXG5cbiAgcGFyc2U6IChzdHIsIGFic3BhdGgpIC0+XG4gICAgd2hpbGUgKG1hdGNoID0gQHJlZ2V4LmV4ZWMoc3RyKSkgIT0gbnVsbFxuXG4gICAgICBhc3NldCA9IG1hdGNoWzFdXG4gICAgICB0eXBlID0gbWF0Y2hbMl1cblxuICAgICAgY29uc29sZS5sb2cgdHlwZVxuICAgICAgZGlyID0gaWYgdHlwZSA9PSAnYXVkaW8nIG9yIHR5cGUgPT0gJ3ZpZGVvJyB0aGVuICdtaXNjJyBlbHNlIHR5cGVcbiAgICAgIHBhdGggPSBcIiN7YWJzcGF0aH0je0B0aXRsZUNhc2UoZGlyKX0vI3thc3NldH1cIlxuICAgICAgZWxlbSA9IG51bGxcblxuICAgICAgaWYgdHlwZSA9PSAnaW1hZ2VzJ1xuICAgICAgICBlbGVtID0gXCI8aW1nIGFsdD1cXFwiI3thc3NldH1cXFwiIHNyYz1cXFwiI3twYXRofVxcXCIvPlwiXG4gICAgICBlbHNlIGlmIHR5cGUgPT0gJ2F1ZGlvJ1xuICAgICAgICBlbGVtID0gXCI8YXVkaW8gc3JjPVxcXCIje3BhdGh9XFxcIiBjb250cm9scz1cXFwiY29udHJvbHNcXFwiIHByZWxvYWQ9XFxcIm5vbmVcXFwiPjwvYXVkaW8+XCJcblxuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIGVsZW0pXG5cbiAgICByZXR1cm4gc3RyXG4iXX0=
