Reader.prototype.Events = (function() {
  function Events(options) {
    this.options = options != null ? options : {};
    this.defaults = {
      reader: '#reader-frame',
      docNav: '#doc-nav',
      navToggle: '[data-nav=contents]',
      chBack: '[data-nav=chBack]',
      chFwd: '[data-nav=chFwd]',
      pgBack: '[data-nav=pgBack]',
      pgFwd: '[data-nav=pgFwd]',
      speed: 400
    };
    this.isScrolling = false;
    this.triggeredScroll = false;
    this.minScroll = -12;
    this.maxScroll = 12;
    this.offset = 15;
    this.clickEvt = 'ontouchstart' in document.documentElement ? 'touchend' : 'click';
    this.elemPos = null;
    this.prevPos = null;
    this.currSpread = null;
    this.maxLen = null;
    this.columns = [];
    this.frameMap = [];
    this.settings = $.extend({}, this.options, this.defaults);
    this.frame = $(this.settings.reader);
    this.navbar = $(this.settings.docNav);
  }

  Events.prototype.preventDefault = function(e) {
    if (e && e.originalEvent) {
      e.preventDefault();
      return e.stopPropagation();
    }
  };

  Events.prototype.debounce = function(func, wait, immediate) {
    var timeout;
    timeout = void 0;
    return function() {
      var args, callNow, context, later;
      context = this;
      args = arguments;
      later = function() {
        timeout = null;
        if (!immediate) {
          return func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        return func.apply(context, args);
      }
    };
  };

  Events.prototype.setColGap = function() {
    return this.colGap = parseInt(this.frame.css('column-gap'), 10);
  };

  Events.prototype.setFrameWidth = function() {
    return this.frameWidth = this.frame.width();
  };

  Events.prototype.closestPos = function(num, arr) {
    var currIdx, currPos, diff, idx, item1, item2, j, k, len, len1, newdiff, ref, val;
    currPos = 0;
    currIdx = 0;
    diff = Math.abs(num - currPos);
    for (idx = j = 0, len = arr.length; j < len; idx = ++j) {
      item1 = arr[idx];
      ref = arr[idx];
      for (val = k = 0, len1 = ref.length; k < len1; val = ++k) {
        item2 = ref[val];
        newdiff = Math.abs(num - arr[idx][val]);
        if (newdiff < diff) {
          diff = newdiff;
          currPos = arr[idx][val];
          currIdx = idx;
        }
      }
    }
    return {
      idx: currIdx,
      pos: currPos
    };
  };

  Events.prototype.returnToPos = function() {
    var closest;
    closest = this.closestPos(this.frame.scrollLeft(), this.frameMap);
    this.prepareScroll();
    return this.animateScroll(closest.pos, null, closest.idx);
  };

  Events.prototype.mapColumns = function() {
    var screenW;
    this.frameMap = [];
    this.maxLen = 0;
    screenW = 0;
    this.columns.map((function(_this) {
      return function(cols, idx) {
        var i, j, panels, ref, result;
        result = [];
        _this.maxLen += cols;
        if (cols === 1) {
          result.push(screenW);
          screenW += _this.frameWidth / 2 + _this.colGap - _this.offset * 1.5;
        } else if (cols >= 2) {
          panels = Math.ceil(cols / 2);
          for (i = j = 1, ref = panels; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
            result.push(screenW);
            screenW += _this.frameWidth + _this.colGap;
          }
        }
        return _this.frameMap[idx] = result;
      };
    })(this));
    return this.maxLen = Math.floor(this.maxLen / 2);
  };

  Events.prototype.setArticlePos = function() {
    var articles;
    articles = $('[data-article]');
    this.elemPos = 0;
    this.prevPos = 0;
    this.columns = [];
    return articles.each((function(_this) {
      return function(i, el) {
        var marker, pagePos, pageWidth, reader, readerOffset;
        el = $(el);
        el.append('<span class="mrk"/>');
        marker = $('.mrk');
        reader = {
          width: _this.frameWidth,
          left: _this.frame.offset().left,
          scrollPos: _this.frame.scrollLeft()
        };
        readerOffset = reader.left * 2;
        pageWidth = reader.width / 2 + reader.left;
        pagePos = (reader.scrollPos + marker.offset().left) - readerOffset + pageWidth;
        _this.elemPos = _this.prevPos || 0;
        _this.prevPos = pagePos < 0 ? 0 : pagePos;
        _this.columns.push(Math.ceil((_this.prevPos - _this.elemPos) / pageWidth));
        el.attr('data-offset-left', _this.elemPos);
        marker.remove();
        if (i === articles.length - 1) {
          return _this.mapColumns();
        }
      };
    })(this));
  };

  Events.prototype.bindElems = function() {
    $(document).on('keydown', (function(_this) {
      return function(e) {
        return _this.keyPress(e);
      };
    })(this));
    $(document).on(this.clickEvt, '.doc-link', (function(_this) {
      return function(e) {
        return _this.scrollChapter(e);
      };
    })(this));
    $(this.settings.navToggle).on(this.clickEvt, (function(_this) {
      return function(e) {
        return _this.toggleNav(e);
      };
    })(this));
    $(this.settings.chFwd).on(this.clickEvt, (function(_this) {
      return function(e) {
        return _this.scrollChapter(e, 1);
      };
    })(this));
    $(this.settings.chBack).on(this.clickEvt, (function(_this) {
      return function(e) {
        return _this.scrollChapter(e, -1);
      };
    })(this));
    $(this.settings.pgFwd).on(this.clickEvt, (function(_this) {
      return function(e) {
        return _this.scrollPage(e, 1);
      };
    })(this));
    return $(this.settings.pgBack).on(this.clickEvt, (function(_this) {
      return function(e) {
        return _this.scrollPage(e, -1);
      };
    })(this));
  };

  Events.prototype.prepareScroll = function(e) {
    this.preventDefault(e);
    if (this.isScrolling) {
      this.frame.stop(true, true);
    }
    return this.isScrolling = true;
  };

  Events.prototype.scrollPage = function(e, pos, callback) {
    var currLeft, dest, dist;
    this.prepareScroll(e);
    dist = this.frameWidth;
    currLeft = this.frame.scrollLeft();
    dest = (dist * pos) + currLeft + (this.colGap * pos);
    return this.animateScroll(dest, callback, pos);
  };

  Events.prototype.scrollChapter = function(e, callback) {
    var dest, target;
    this.prepareScroll(e);
    target = $("#" + ($(e.target).attr('data-link')));
    dest = target.attr('data-offset-left');
    return this.animateScroll(dest, callback);
  };

  Events.prototype.animateScroll = function(dest, callback, pos) {
    this.closeNav();
    return this.frame.stop(true, true).animate({
      scrollLeft: dest
    }, (function(_this) {
      return function() {
        var idx;
        _this.isScrolling = false;
        idx = parseInt("" + (_this.currSpread + pos), 10);
        _this.currSpread = idx < 0 ? 0 : idx > _this.maxLen ? _this.maxLen : idx;
        if (callback && typeof callback === 'function') {
          return callback();
        }
      };
    })(this));
  };

  Events.prototype.closeNav = function() {
    return this.navbar.removeClass('active');
  };

  Events.prototype.keyPress = function(e) {
    if (e && e.which) {
      switch (e.which) {
        case 27:
          return this.closeNav();
        case 37:
          return this.scrollPage(e, -1);
        case 39:
          return this.scrollPage(e, 1);
      }
    }
  };

  Events.prototype.toggleNav = function(e) {
    this.preventDefault(e);
    return this.navbar.toggleClass('active');
  };

  return Events;

})();

//# sourceMappingURL=data:application/json;base64,
