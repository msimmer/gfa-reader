var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Reader.prototype.Events = (function() {
  var _bounceResize, _keyPress, _scrollChapter, _scrollToEl, _toggleNav, blockParent, blocks, blocksArr, blocksSel, colGap, columns, currSpread, defaults, delay, elemPos, frame, frameMap, frameWidth, frmDims, isScrolling, maxLen, maxScroll, minScroll, navbar, offset, prevPos, scrollTimer, touch, triggeredScroll;

  isScrolling = false;

  triggeredScroll = false;

  scrollTimer = null;

  minScroll = -12;

  maxScroll = 12;

  offset = 15;

  elemPos = null;

  prevPos = null;

  currSpread = null;

  maxLen = null;

  touch = null;

  colGap = null;

  frameWidth = null;

  frame = null;

  frmDims = {};

  navbar = null;

  columns = [];

  frameMap = [];

  delay = 150;

  _keyPress = null;

  _scrollChapter = null;

  _toggleNav = null;

  _scrollToEl = null;

  _bounceResize = null;

  defaults = {
    reader: '#reader-frame',
    docNav: '#doc-nav',
    navToggle: '[data-nav=contents]',
    chBack: '[data-nav=chBack]',
    chFwd: '[data-nav=chFwd]',
    pgBack: '[data-nav=pgBack]',
    pgFwd: '[data-nav=pgFwd]',
    note: 'a.fn',
    scrollSpeed: 400,
    animSpeedFast: 500,
    animSpeedSlow: 1000
  };

  blocks = 'address article aside blockquote canvas dd div dl fieldset figcaption figure figcaption footer form h1 h2 h3 h4 h5 h6 header hgroup hr li main nav noscript ol output p pre section table tfoot ul video';

  blocksArr = blocks.split(' ');

  blocksSel = blocksArr.join(',');

  blockParent = function(elem) {
    if (blocksArr.indexOf(elem[0].nodeName.toLowerCase()) > -1) {
      return elem;
    } else {
      return blockParent(elem.parent());
    }
  };

  function Events(options) {
    if (options == null) {
      options = {};
    }
    this._toggleNav = bind(this._toggleNav, this);
    this._keyPress = bind(this._keyPress, this);
    this._scrollChapter = bind(this._scrollChapter, this);
    this._scrollToEl = bind(this._scrollToEl, this);
    this.settings = $.extend({}, options, defaults);
    frame = $(this.settings.reader);
    navbar = $(this.settings.docNav);
    touch = Modernizr.touch;
    frmDims = {
      top: frame.offset().top,
      left: frame.offset().top,
      gap: parseInt(frame.css('column-gap'), 10)
    };
    console.log(frmDims);
    this.nextPage = function(callback) {
      return this.scrollPage(null, 1, callback);
    };
    this.prevPage = function(callback) {
      return this.scrollPage(null, -1, callback);
    };
    this.scrollTo = function(selector, callback) {
      return this._scrollToEl(null, selector, callback);
    };
  }

  Events.prototype.preventDefault = function(e) {
    if (e && e.originalEvent) {
      e.preventDefault();
      return e.stopPropagation();
    }
  };

  Events.prototype.resizeImages = function() {
    return $('img').each((function(_this) {
      return function(i, o) {
        return _this.setImageSize.call($(o)[0]);
      };
    })(this));
  };

  Events.prototype.setImageSize = function() {
    var $this, readerInnerHeight;
    $this = $(this);
    readerInnerHeight = frame.height();
    if (this.naturalHeight > this.naturalWidth) {
      $this.css({
        'max-height': '100%'
      });
      return $this.parent('.img').css({
        'max-height': readerInnerHeight,
        'height': readerInnerHeight
      });
    }
  };

  Events.prototype.setColGap = function() {
    return colGap = parseInt(frame.css('column-gap'), 10);
  };

  Events.prototype.setFrameWidth = function() {
    return frameWidth = frame.width();
  };

  Events.prototype.closestPos = function(num, arr) {
    var currIdx, currPos, diff, idx, item1, item2, j, k, len, len1, newdiff, ref, val;
    currPos = 0;
    currIdx = 0;
    diff = Math.abs(num - currPos);
    for (idx = j = 0, len = arr.length; j < len; idx = ++j) {
      item1 = arr[idx];
      ref = arr[idx];
      for (val = k = 0, len1 = ref.length; k < len1; val = ++k) {
        item2 = ref[val];
        newdiff = Math.abs(num - arr[idx][val]);
        if (newdiff < diff) {
          diff = newdiff;
          currPos = arr[idx][val];
          currIdx = idx;
        }
      }
    }
    return {
      idx: currIdx,
      pos: currPos
    };
  };

  Events.prototype.returnToPos = function() {
    var closest;
    closest = this.closestPos(frame.scrollLeft(), frameMap);
    this.prepareScroll();
    return this.animateScroll(closest.pos, null, closest.idx);
  };

  Events.prototype.mapColumns = function() {
    var screenW;
    frameMap = [];
    maxLen = 0;
    screenW = 0;
    columns.map((function(_this) {
      return function(cols, idx) {
        var i, j, panels, ref, result;
        result = [];
        maxLen += cols;
        if (cols === 1) {
          result.push(screenW);
          screenW += frameWidth / 2 + colGap - offset * 1.5;
        } else if (cols >= 2) {
          panels = Math.ceil(cols / 2);
          for (i = j = 1, ref = panels; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
            result.push(screenW);
            screenW += frameWidth + colGap;
          }
        }
        return frameMap[idx] = result;
      };
    })(this));
    return maxLen = Math.floor(maxLen / 2);
  };

  Events.prototype.parseVals = function(v1, v2) {
    return parseInt(v1, 10) + parseInt(v2, 10);
  };

  Events.prototype.sizeColumns = function() {
    var articles, colCount;
    articles = $('[data-article]');
    elemPos = 0;
    prevPos = 0;
    colCount = 0;
    columns = [];
    return articles.each((function(_this) {
      return function(i, article) {
        var elems, marker, pagePos, pageWidth, reader, readerOffset;
        article = $(article);
        article.append('<span class="mrk"/>');
        marker = $('.mrk');
        reader = {
          width: frameWidth,
          left: frame.offset().left,
          scrollPos: frame.scrollLeft()
        };
        readerOffset = touch ? reader.left - 30 : reader.left * 2;
        pageWidth = touch ? reader.width : reader.width / 2 + reader.left;
        pagePos = (reader.scrollPos + marker.offset().left) - readerOffset + pageWidth;
        elemPos = prevPos || 0;
        prevPos = pagePos < 0 ? 0 : pagePos;
        colCount = Math.ceil((prevPos - elemPos) / pageWidth);
        columns.push(colCount);
        if (touch === false) {
          elems = article.find('h1,h2,h3,h4,h5,h6');
          elems.each(function(i, elem) {
            var mBot, mTop, pBot, pTop;
            mTop = $(elem).css('margin-top');
            mBot = $(elem).css('margin-bottom');
            pTop = $(elem).css('padding-top');
            pBot = $(elem).css('padding-bottom');
            $(elem).css({
              'margin-top': 0,
              'padding-top': _this.parseVals(mTop, pTop)
            });
            $(elem).css({
              'margin-bottom': 0,
              'padding-bottom': _this.parseVals(mBot, pBot)
            });
            return article.height(frame.height() * colCount);
          });
        }
        article.attr('data-offset-left', elemPos);
        marker.remove();
        if (i === articles.length - 1) {
          _this.mapColumns();
          return setTimeout((function() {
            return _this.returnToPos();
          }), 0);
        }
      };
    })(this));
  };

  Events.prototype.bind = function() {
    _keyPress = this._keyPress;
    _scrollChapter = this._scrollChapter;
    _toggleNav = this._toggleNav;
    _scrollToEl = this._scrollToEl;
    _bounceResize = Reader.prototype.Utils.debounce((function(_this) {
      return function() {
        _this.resizeImages();
        _this.setColGap();
        _this.setFrameWidth();
        return _this.sizeColumns();
      };
    })(this), delay);
    $(document).on('keydown', _keyPress);
    $(document).on('click', '.doc-link', _scrollChapter);
    $(this.settings.navToggle).on('click', _toggleNav);
    $(this.settings.note).on('click', _scrollToEl);
    return $(window).on('resize', _bounceResize);
  };

  Events.prototype.destroy = function() {
    $(document).off('keydown', _keyPress);
    $(document).off('click', '.doc-link', _scrollChapter);
    $(this.settings.navToggle).off('click', _toggleNav);
    $(this.settings.note).off('click', _scrollToEl);
    return $(window).off('resize', _bounceResize);
  };

  Events.prototype.prepareScroll = function(e) {
    this.preventDefault(e);
    if (isScrolling) {
      frame.stop(true, true);
    }
    return isScrolling = true;
  };

  Events.prototype.scrollPage = function(e, pos, callback) {
    var currLeft, dest, dist;
    this.prepareScroll(e);
    dist = frameWidth;
    currLeft = frame.scrollLeft();
    dest = (dist * pos) + currLeft + (colGap * pos);
    return this.animateScroll(dest, callback);
  };

  Events.prototype.animateScroll = function(dest, callback) {
    this.closeNav();
    return frame.stop(true, true).animate({
      scrollLeft: dest
    }, this.settings.scrollSpeed, (function(_this) {
      return function() {
        isScrolling = false;
        if (callback && typeof callback === 'function') {
          return callback();
        }
      };
    })(this));
  };

  Events.prototype.closeNav = function() {
    return navbar.removeClass('active');
  };

  Events.prototype._scrollToEl = function(e, selector, callback) {
    var currLeft, currentSpread, dest, diff, elem, elemLeft, fast, slow, target, targetSpread;
    this.prepareScroll(e);
    target = null;
    if (selector && typeof selector === 'string') {
      target = selector;
    } else if (e != null ? e.target : void 0) {
      target = e.target;
    }
    elem = $($(target).attr('href'));
    if (!(elem != null ? elem.length : void 0)) {
      return console.error("Error: Element '" + selector + "' doesn't exist in the document.");
    }
    elemLeft = blockParent(elem).offset().left;
    currLeft = frame.scrollLeft();
    if (!touch) {
      elemLeft -= frameWidth / 2 + (colGap + offset);
    } else {
      elemLeft -= frmDims.left;
    }
    targetSpread = (elemLeft + currLeft) / frameWidth;
    currentSpread = currLeft / frameWidth;
    diff = targetSpread - currentSpread;
    dest = currLeft + (diff * frameWidth);
    fast = this.settings.animSpeedFast;
    slow = this.settings.animSpeedSlow;
    return this.animateScroll(dest, function() {
      elem.addClass('highlight').addClass('highlight-add');
      return setTimeout(function() {
        elem.removeClass('highlight-add');
        return setTimeout(function() {
          return elem.removeClass('highlight');
        }, fast);
      }, slow);
    });
  };

  Events.prototype._scrollChapter = function(e, callback) {
    var dest, target;
    this.prepareScroll(e);
    target = $("#" + ($(e.target).attr('data-link')));
    dest = target.attr('data-offset-left');
    return this.animateScroll(dest, callback);
  };

  Events.prototype._keyPress = function(e) {
    if (e && e.which) {
      switch (e.which) {
        case 27:
          return this.closeNav();
        case 37:
          return this.scrollPage(e, -1);
        case 39:
          return this.scrollPage(e, 1);
      }
    }
  };

  Events.prototype._toggleNav = function(e) {
    this.preventDefault(e);
    return navbar.toggleClass('active');
  };

  Events.prototype.initialize = function() {
    $('img').each((function(_this) {
      return function(i, o) {
        return $(o)[0].onload = _this.setImageSize;
      };
    })(this));
    this.resizeImages();
    this.setFrameWidth();
    this.setColGap();
    this.sizeColumns();
    return this.bind();
  };

  return Events;

})();

//# sourceMappingURL=data:application/json;base64,
