Reader.prototype.Events = (function() {
  var blockElems, blockParent, colGap, columns, currSpread, defaults, elemPos, frame, frameMap, frameWidth, isScrolling, maxLen, maxScroll, minScroll, navbar, offset, prevPos, triggeredScroll;

  isScrolling = false;

  triggeredScroll = false;

  minScroll = -12;

  maxScroll = 12;

  offset = 15;

  elemPos = null;

  prevPos = null;

  currSpread = null;

  maxLen = null;

  colGap = null;

  frameWidth = null;

  frame = null;

  navbar = null;

  columns = [];

  frameMap = [];

  defaults = {
    reader: '#reader-frame',
    docNav: '#doc-nav',
    navToggle: '[data-nav=contents]',
    chBack: '[data-nav=chBack]',
    chFwd: '[data-nav=chFwd]',
    pgBack: '[data-nav=pgBack]',
    pgFwd: '[data-nav=pgFwd]',
    note: 'a.fn',
    scrollSpeed: 400,
    animSpeedFast: 500,
    animSpeedSlow: 1000
  };

  blockElems = ['address', 'article', 'aside', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'figcaption', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'main', 'nav', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'];

  blockParent = function(elem) {
    if (blockElems.indexOf(elem[0].nodeName.toLowerCase()) > -1) {
      return elem;
    } else {
      return blockParent(elem.parent());
    }
  };

  function Events(options) {
    if (options == null) {
      options = {};
    }
    this.settings = $.extend({}, options, defaults);
    frame = $(this.settings.reader);
    navbar = $(this.settings.docNav);
    this.nextPage = function(callback) {
      return this.scrollPage(null, 1, callback);
    };
    this.prevPage = function(callback) {
      return this.scrollPage(null, -1, callback);
    };
    this.scrollTo = function(selector, callback) {
      return this.scrollToEl(null, selector, callback);
    };
  }

  Events.prototype.preventDefault = function(e) {
    if (e && e.originalEvent) {
      e.preventDefault();
      return e.stopPropagation();
    }
  };

  Events.prototype.debounce = function(func, wait, immediate) {
    var timeout;
    timeout = void 0;
    return function() {
      var args, callNow, context, later;
      context = this;
      args = arguments;
      later = function() {
        timeout = null;
        if (!immediate) {
          return func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        return func.apply(context, args);
      }
    };
  };

  Events.prototype.setColGap = function() {
    return colGap = parseInt(frame.css('column-gap'), 10);
  };

  Events.prototype.setFrameWidth = function() {
    return frameWidth = frame.width();
  };

  Events.prototype.closestPos = function(num, arr) {
    var currIdx, currPos, diff, idx, item1, item2, j, k, len, len1, newdiff, ref, val;
    currPos = 0;
    currIdx = 0;
    diff = Math.abs(num - currPos);
    for (idx = j = 0, len = arr.length; j < len; idx = ++j) {
      item1 = arr[idx];
      ref = arr[idx];
      for (val = k = 0, len1 = ref.length; k < len1; val = ++k) {
        item2 = ref[val];
        newdiff = Math.abs(num - arr[idx][val]);
        if (newdiff < diff) {
          diff = newdiff;
          currPos = arr[idx][val];
          currIdx = idx;
        }
      }
    }
    return {
      idx: currIdx,
      pos: currPos
    };
  };

  Events.prototype.returnToPos = function() {
    var closest;
    closest = this.closestPos(frame.scrollLeft(), frameMap);
    this.prepareScroll();
    return this.animateScroll(closest.pos, null, closest.idx);
  };

  Events.prototype.mapColumns = function() {
    var screenW;
    frameMap = [];
    maxLen = 0;
    screenW = 0;
    columns.map((function(_this) {
      return function(cols, idx) {
        var i, j, panels, ref, result;
        result = [];
        maxLen += cols;
        if (cols === 1) {
          result.push(screenW);
          screenW += frameWidth / 2 + colGap - offset * 1.5;
        } else if (cols >= 2) {
          panels = Math.ceil(cols / 2);
          for (i = j = 1, ref = panels; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
            result.push(screenW);
            screenW += frameWidth + colGap;
          }
        }
        return frameMap[idx] = result;
      };
    })(this));
    return maxLen = Math.floor(maxLen / 2);
  };

  Events.prototype.setArticlePos = function() {
    var articles;
    articles = $('[data-article]');
    elemPos = 0;
    prevPos = 0;
    columns = [];
    return articles.each((function(_this) {
      return function(i, el) {
        var marker, pagePos, pageWidth, reader, readerOffset;
        el = $(el);
        el.append('<span class="mrk"/>');
        marker = $('.mrk');
        reader = {
          width: frameWidth,
          left: frame.offset().left,
          scrollPos: frame.scrollLeft()
        };
        readerOffset = reader.left * 2;
        pageWidth = reader.width / 2 + reader.left;
        pagePos = (reader.scrollPos + marker.offset().left) - readerOffset + pageWidth;
        elemPos = prevPos || 0;
        prevPos = pagePos < 0 ? 0 : pagePos;
        columns.push(Math.ceil((prevPos - elemPos) / pageWidth));
        el.attr('data-offset-left', elemPos);
        marker.remove();
        if (i === articles.length - 1) {
          _this.mapColumns();
          return setTimeout(function() {
            return _this.returnToPos();
          }, 0);
        }
      };
    })(this));
  };

  Events.prototype.bindElems = function() {
    $(document).on('keydown', (function(_this) {
      return function(e) {
        return _this.keyPress(e);
      };
    })(this));
    $(document).on('click', '.doc-link', (function(_this) {
      return function(e) {
        return _this.scrollChapter(e);
      };
    })(this));
    $(this.settings.navToggle).on('click', (function(_this) {
      return function(e) {
        return _this.toggleNav(e);
      };
    })(this));
    $(this.settings.chFwd).on('click', (function(_this) {
      return function(e) {
        return _this.scrollChapter(e, 1);
      };
    })(this));
    $(this.settings.chBack).on('click', (function(_this) {
      return function(e) {
        return _this.scrollChapter(e, -1);
      };
    })(this));
    $(this.settings.pgFwd).on('click', (function(_this) {
      return function(e) {
        return _this.scrollPage(e, 1);
      };
    })(this));
    $(this.settings.pgBack).on('click', (function(_this) {
      return function(e) {
        return _this.scrollPage(e, -1);
      };
    })(this));
    return $(this.settings.note).on('click', (function(_this) {
      return function(e) {
        return _this.scrollToEl(e, $(e.currentTarget).attr('href'));
      };
    })(this));
  };

  Events.prototype.prepareScroll = function(e) {
    this.preventDefault(e);
    if (isScrolling) {
      frame.stop(true, true);
    }
    return isScrolling = true;
  };

  Events.prototype.scrollToEl = function(e, selector, callback) {
    var currLeft, currentSpread, dest, diff, elem, elemLeft, fast, refWidth, slow, targetSpread;
    this.prepareScroll(e);
    elem = $(selector);
    if (!elem.length) {
      return console.error("Error: Element '" + selector + "' doesn't exist in the document.");
    }
    elemLeft = blockParent(elem).offset().left;
    currLeft = frame.scrollLeft();
    refWidth = frameWidth + colGap;
    elemLeft -= refWidth / 2 + colGap + offset;
    targetSpread = (elemLeft + currLeft) / refWidth;
    currentSpread = currLeft / refWidth;
    diff = targetSpread - currentSpread;
    dest = currLeft + (diff * refWidth);
    fast = this.settings.animSpeedFast;
    slow = this.settings.animSpeedSlow;
    return this.animateScroll(dest, function() {
      elem.addClass('highlight').addClass('highlight-add');
      return setTimeout(function() {
        elem.removeClass('highlight-add');
        return setTimeout(function() {
          return elem.removeClass('highlight');
        }, fast);
      }, slow);
    });
  };

  Events.prototype.scrollPage = function(e, pos, callback) {
    var currLeft, dest, dist;
    this.prepareScroll(e);
    dist = frameWidth;
    currLeft = frame.scrollLeft();
    dest = (dist * pos) + currLeft + (colGap * pos);
    return this.animateScroll(dest, callback);
  };

  Events.prototype.scrollChapter = function(e, callback) {
    var dest, target;
    this.prepareScroll(e);
    target = $("#" + ($(e.target).attr('data-link')));
    dest = target.attr('data-offset-left');
    return this.animateScroll(dest, callback);
  };

  Events.prototype.animateScroll = function(dest, callback) {
    this.closeNav();
    return frame.stop(true, true).animate({
      scrollLeft: dest
    }, this.settings.scrollSpeed, (function(_this) {
      return function() {
        isScrolling = false;
        if (callback && typeof callback === 'function') {
          return callback();
        }
      };
    })(this));
  };

  Events.prototype.closeNav = function() {
    return navbar.removeClass('active');
  };

  Events.prototype.keyPress = function(e) {
    if (e && e.which) {
      switch (e.which) {
        case 27:
          return this.closeNav();
        case 37:
          return this.scrollPage(e, -1);
        case 39:
          return this.scrollPage(e, 1);
      }
    }
  };

  Events.prototype.toggleNav = function(e) {
    this.preventDefault(e);
    return navbar.toggleClass('active');
  };

  Events.prototype.initialize = function() {
    this.setFrameWidth();
    this.setColGap();
    this.setArticlePos();
    return this.bindElems();
  };

  return Events;

})();

//# sourceMappingURL=data:application/json;base64,
