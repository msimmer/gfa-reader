var Reader;

Reader = (function() {
  function Reader(options1) {
    this.options = options1 != null ? options1 : {};
    this.query = new this.Query();
    this.parse = new this.Parse();
    this.layout = new this.Layout();
    this.aspect = new this.Aspect();
    this.template = new this.Template();
    this["package"] = {
      attributes: null,
      guide: null,
      manifest: null,
      metadata: null,
      spine: null,
      text: null
    };
    this.location = {
      assets: this.options.assets || '',
      url: ("" + window.location.origin).replace(/\/$/, '')
    };
    this.nav = {
      elem: null,
      regexp: null,
      path: null,
      attribute: null
    };
    this.navMap = null;
    this.navUrl = null;
    this.ncx = null;
    this.navRe = null;
    this.html = [];
    this.metadata = [];
    this.elem = document.getElementById('reader');
    this.pagect = null;
  }

  Reader.prototype.getNavDocument = function(that) {
    return function(key, val, item) {
      if (key === that.nav.attribute && that.nav.regexp.test(val)) {
        that.nav.elem = item;
        that.nav.path = item.getAttribute('href');
        return that.xml();
      }
    };
  };

  Reader.prototype.renderPage = function(that, options) {
    return function(url, parentId) {
      return that.query.html(that.location.assets + "/" + url).done(function(data) {
        var doc;
        doc = that.template.parse(data, that.location.assets);
        that.layout.render(doc, parentId);
        if (!(that.pagect -= 1)) {
          return that.trigger('pagesloaded', {});
        }
      });
    };
  };

  Reader.prototype.xml = function() {
    var curry;
    curry = this.renderPage(this, this.options);
    return this.query.xml(this.location.assets + "/" + this.nav.path).done((function(_this) {
      return function(data) {
        _this.ncx = _this.parse.nav(data);
        _this.navMap = _this.parse.mapNcx(_this.ncx.navMap.navPoint);
        return _this.layout.build(_this.navMap, curry);
      };
    })(this));
  };

  Reader.prototype.build = function(data) {
    var curry;
    curry = this.getNavDocument(this);
    return this.pagect = this.parse.xml(data, curry)["package"].spine.itemref.length;
  };

  Reader.prototype.on = function(handle, callback) {
    var evt;
    evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(handle, true, false, {});
    return this.elem.addEventListener(handle, callback);
  };

  Reader.prototype.trigger = function(handle, data) {
    return this.elem.dispatchEvent(new CustomEvent(handle, data));
  };

  Reader.prototype.initialize = function() {
    var attr, token;
    token = this.options.toc ? 'nav' : 'ncx';
    attr = this.options.toc ? 'properties' : 'id';
    this.nav.regexp = new RegExp("^" + token + "$", 'i');
    this.nav.attribute = attr;
    this.query.xml(this.options.packageUrl).done((function(_this) {
      return function(data) {
        return _this.build(data);
      };
    })(this));
    return $(document).on('styles:scoped', (function(_this) {
      return function() {
        return _this.trigger('ready', {});
      };
    })(this));
  };

  return Reader;

})();

window.Reader = Reader;

//# sourceMappingURL=data:application/json;base64,
