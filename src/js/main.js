var Reader;

Reader = (function() {
  function Reader(options1) {
    this.options = options1 != null ? options1 : {};
    this.query = new this.Query();
    this.parse = new this.Parse();
    this.layout = new this.Layout();
    this.aspect = new this.Aspect();
    this.template = new this.Template();
    this["package"] = {
      attributes: null,
      guide: null,
      manifest: null,
      metadata: null,
      spine: null,
      text: null
    };
    this.location = {
      assets: this.options.assets || '',
      url: ("" + window.location.origin).replace(/\/$/, '')
    };
    this.nav = {
      elem: null,
      regexp: null,
      path: null,
      attribute: null
    };
    this.navMap = null;
    this.navUrl = null;
    this.ncx = null;
    this.navRe = null;
    this.html = [];
    this.metadata = [];
  }

  Reader.prototype.getNavDocument = function(that) {
    return function(key, val, item) {
      if (key === that.nav.attribute && that.nav.regexp.test(val)) {
        that.nav.elem = item;
        that.nav.path = item.getAttribute('href');
        return that.xml();
      }
    };
  };

  Reader.prototype.renderPage = function(that, options) {
    return function(url, parentId) {
      return that.query.html(that.location.assets + "/" + url).done(function(data) {
        var doc;
        doc = that.template.parse(data, that.location.assets);
        return that.layout.render(doc, parentId);
      });
    };
  };

  Reader.prototype.xml = function() {
    var curry;
    curry = this.renderPage(this, this.options);
    return this.query.xml(this.location.assets + "/" + this.nav.path).done((function(_this) {
      return function(data) {
        _this.ncx = _this.parse.nav(data);
        _this.navMap = _this.parse.mapNcx(_this.ncx.navMap.navPoint);
        return _this.layout.build(_this.navMap, curry);
      };
    })(this));
  };

  Reader.prototype.build = function(data) {
    var curry;
    curry = this.getNavDocument(this);
    return this.parse.xml(data, curry);
  };

  Reader.prototype.initialize = function() {
    var attr, token;
    token = this.options.toc ? 'nav' : 'ncx';
    attr = this.options.toc ? 'properties' : 'id';
    this.nav.regexp = new RegExp("^" + token + "$", 'i');
    this.nav.attribute = attr;
    return this.query.xml(this.options.packageUrl).done((function(_this) {
      return function(data) {
        return _this.build(data);
      };
    })(this));
  };

  return Reader;

})();

window.Reader = Reader;

//# sourceMappingURL=data:application/json;base64,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QUFWO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQztFQUxVOzs7Ozs7QUFPZCxNQUFNLENBQUMsTUFBUCxHQUFnQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUmVhZGVyXG5cbiAgY29uc3RydWN0b3I6IChAb3B0aW9ucyA9IHt9KS0+XG5cbiAgICBAcXVlcnkgICAgPSBuZXcgQFF1ZXJ5KClcbiAgICBAcGFyc2UgICAgPSBuZXcgQFBhcnNlKClcbiAgICBAbGF5b3V0ICAgPSBuZXcgQExheW91dCgpXG4gICAgQGFzcGVjdCAgID0gbmV3IEBBc3BlY3QoKVxuICAgIEB0ZW1wbGF0ZSA9IG5ldyBAVGVtcGxhdGUoKVxuXG4gICAgQHBhY2thZ2UgPVxuICAgICAgYXR0cmlidXRlczogbnVsbFxuICAgICAgZ3VpZGUgICAgIDogbnVsbFxuICAgICAgbWFuaWZlc3QgIDogbnVsbFxuICAgICAgbWV0YWRhdGEgIDogbnVsbFxuICAgICAgc3BpbmUgICAgIDogbnVsbFxuICAgICAgdGV4dCAgICAgIDogbnVsbFxuXG4gICAgQGxvY2F0aW9uID1cbiAgICAgIGFzc2V0cyA6IEBvcHRpb25zLmFzc2V0cyBvciAnJ1xuICAgICAgdXJsICAgIDogXCIje3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59XCIucmVwbGFjZSgvXFwvJC8sICcnKVxuXG4gICAgQG5hdiA9XG4gICAgICBlbGVtICAgICAgOiBudWxsXG4gICAgICByZWdleHAgICAgOiBudWxsXG4gICAgICBwYXRoICAgICAgOiBudWxsXG4gICAgICBhdHRyaWJ1dGUgOiBudWxsXG5cbiAgICBAbmF2TWFwICAgPSBudWxsXG4gICAgQG5hdlVybCAgID0gbnVsbFxuICAgIEBuY3ggICAgICA9IG51bGxcbiAgICBAbmF2UmUgICAgPSBudWxsXG4gICAgQGh0bWwgICAgID0gW11cbiAgICBAbWV0YWRhdGEgPSBbXVxuXG4gIGdldE5hdkRvY3VtZW50OiAodGhhdCktPlxuICAgIHJldHVybiAoa2V5LCB2YWwsIGl0ZW0pLT5cbiAgICAgIGlmIGtleSA9PSB0aGF0Lm5hdi5hdHRyaWJ1dGUgYW5kIHRoYXQubmF2LnJlZ2V4cC50ZXN0KHZhbClcbiAgICAgICAgdGhhdC5uYXYuZWxlbSA9IGl0ZW1cbiAgICAgICAgdGhhdC5uYXYucGF0aCA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgICAgdGhhdC54bWwoKVxuXG4gIHJlbmRlclBhZ2U6ICh0aGF0LCBvcHRpb25zKS0+XG4gICAgcmV0dXJuICh1cmwsIHBhcmVudElkKSAtPlxuICAgICAgdGhhdC5xdWVyeS5odG1sKFwiI3t0aGF0LmxvY2F0aW9uLmFzc2V0c30vI3t1cmx9XCIpXG4gICAgICAgIC5kb25lIChkYXRhKS0+XG4gICAgICAgICAgZG9jID0gdGhhdC50ZW1wbGF0ZS5wYXJzZShkYXRhLCB0aGF0LmxvY2F0aW9uLmFzc2V0cylcbiAgICAgICAgICB0aGF0LmxheW91dC5yZW5kZXIoZG9jLCBwYXJlbnRJZClcblxuICB4bWw6ICgpLT5cbiAgICBjdXJyeSA9IEByZW5kZXJQYWdlKEAsIEBvcHRpb25zKVxuICAgIEBxdWVyeS54bWwoXCIje0Bsb2NhdGlvbi5hc3NldHN9LyN7QG5hdi5wYXRofVwiKVxuICAgICAgLmRvbmUgKGRhdGEpID0+XG4gICAgICAgIEBuY3ggPSBAcGFyc2UubmF2KGRhdGEpXG4gICAgICAgIEBuYXZNYXAgPSBAcGFyc2UubWFwTmN4KEBuY3gubmF2TWFwLm5hdlBvaW50KVxuICAgICAgICBAbGF5b3V0LmJ1aWxkKEBuYXZNYXAsIGN1cnJ5KVxuXG4gIGJ1aWxkOiAoZGF0YSktPlxuICAgIGN1cnJ5ID0gQGdldE5hdkRvY3VtZW50KEApXG4gICAgQHBhcnNlLnhtbChkYXRhLCBjdXJyeSlcblxuICBpbml0aWFsaXplOiAtPlxuICAgIHRva2VuID0gaWYgQG9wdGlvbnMudG9jIHRoZW4gJ25hdicgZWxzZSAnbmN4J1xuICAgIGF0dHIgPSBpZiBAb3B0aW9ucy50b2MgdGhlbiAncHJvcGVydGllcycgZWxzZSAnaWQnXG4gICAgQG5hdi5yZWdleHAgPSBuZXcgUmVnRXhwKFwiXiN7dG9rZW59JFwiLCAnaScpXG4gICAgQG5hdi5hdHRyaWJ1dGUgPSBhdHRyXG4gICAgQHF1ZXJ5LnhtbChAb3B0aW9ucy5wYWNrYWdlVXJsKS5kb25lIChkYXRhKSA9PiBAYnVpbGQoZGF0YSlcblxud2luZG93LlJlYWRlciA9IFJlYWRlclxuIl19
