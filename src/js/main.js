var Reader,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Reader = (function() {
  var memStore, pagect, proxy;

  proxy = null;

  pagect = null;

  memStore = {
    html: {},
    body: {}
  };

  function Reader(options) {
    this.options = options != null ? options : {};
    this.initialize = bind(this.initialize, this);
    this.destroy = bind(this.destroy, this);
    $('.wrapper').css('visibility', 'hidden');
    NProgress.configure({
      showSpinner: false,
      minimum: 0.1,
      speed: 250
    });
    NProgress.start();
    NProgress.set(0.3);
    proxy = document.createElement('div');
    proxy.id = "_" + (Date.now());
    this.utils = new this.Utils();
    this.query = new this.Query();
    this.parse = new this.Parse();
    this.layout = new this.Layout();
    this.template = new this.Template();
    this.events = new this.Events();
    this.wheel = new this.Wheel();
    this.swipe = new this.Swipe();
    this["package"] = {
      attributes: null,
      guide: null,
      manifest: null,
      metadata: null,
      spine: null,
      text: null
    };
    this.location = {
      assets: this.options.assets || '',
      url: ("" + window.location.origin).replace(/\/$/, '')
    };
    this.nav = {
      elem: null,
      regexp: null,
      path: null,
      attribute: null
    };
    this.navMap = null;
    this.ncx = null;
    this.html = [];
    this.metadata = [];
    this.navElem = document.getElementById('reader-nav');
    this.mainElem = document.getElementById('reader-frame');
  }

  Reader.prototype.getNavDocument = function(that) {
    return function(key, val, item) {
      if (key === that.nav.attribute && that.nav.regexp.test(val)) {
        that.nav.elem = item;
        that.nav.path = item.getAttribute('href');
        return that.xml();
      }
    };
  };

  Reader.prototype.renderPage = function(that) {
    return function(url, parentId, navId) {
      return that.query.html(that.location.assets + "/" + url).done(function(data) {
        var doc;
        doc = that.template.parse(data, that.location.assets);
        that.layout.render(doc, parentId, '#doc-nav');
        if (!(pagect -= 1)) {
          return that.trigger('pagesloaded', {});
        }
      });
    };
  };

  Reader.prototype.xml = function() {
    var curry;
    curry = this.renderPage(this);
    return this.query.xml(this.location.assets + "/" + this.nav.path).done((function(_this) {
      return function(data) {
        _this.ncx = _this.parse.nav(data);
        _this.navMap = _this.parse.mapNcx(_this.ncx.navMap.navPoint);
        return _this.layout.build(_this.navMap, curry, _this.mainElem.id);
      };
    })(this));
  };

  Reader.prototype.build = function(data) {
    var curry;
    curry = this.getNavDocument(this);
    return pagect = this.parse.xml(data, curry)["package"].spine.itemref.length;
  };

  Reader.prototype.on = function(method, callback) {
    var evt;
    evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(method, true, false, {});
    return proxy.addEventListener(method, callback);
  };

  Reader.prototype.trigger = function(method, data) {
    return proxy.dispatchEvent(new CustomEvent(method, data));
  };

  Reader.prototype.setup = function() {
    memStore.html.overflow = $('html').css('overflow');
    memStore.body.overflow = $('body').css('overflow');
    $('html').addClass('reader');
    return $('html,body').css({
      overflow: 'hidden'
    });
  };

  Reader.prototype.destroy = function() {
    $('html').css({
      overflow: memStore.html.overflow
    }).removeClass('reader');
    $('body').css({
      overflow: memStore.body.overflow
    });
    this.events.destroy();
    this.swipe.destroy();
    return proxy = void 0;
  };

  Reader.prototype.initialize = function() {
    var attr, layoutcomplete, observer, token;
    NProgress.set(0.5);
    token = this.options.toc ? 'nav' : 'ncx';
    attr = this.options.toc ? 'properties' : 'id';
    this.nav.regexp = new RegExp("^" + token + "$", 'i');
    this.nav.attribute = attr;
    this.setup();
    this.query.xml(this.options.packageUrl).done((function(_this) {
      return function(data) {
        return _this.build(data);
      };
    })(this));
    layoutcomplete = false;
    observer = new MutationObserver((function(_this) {
      return function(mutations) {
        return mutations.forEach(function(mutationRecord) {
          if (!layoutcomplete) {
            layoutcomplete = true;
            return _this.trigger('layoutcomplete', {});
          }
        });
      };
    })(this));
    observer.observe(document.body, {
      childList: true,
      attributes: true,
      attributeFilter: ['style']
    });
    this.on('pagesloaded', (function(_this) {
      return function() {
        NProgress.set(0.7);
        console.log('Reader pagesloaded');
        return window.scopedPolyFill(document);
      };
    })(this));
    this.on('layoutcomplete', (function(_this) {
      return function() {
        NProgress.set(0.9);
        console.log('Reader layoutcomplete');
        _this.events.initialize();
        return setTimeout((function() {
          return _this.trigger('ready', {});
        }), 0);
      };
    })(this));
    this.on('nextPage', (function(_this) {
      return function() {
        return _this.events.nextPage();
      };
    })(this));
    this.on('prevPage', (function(_this) {
      return function() {
        return _this.events.prevPage();
      };
    })(this));
    this.on('ready', (function(_this) {
      return function() {
        NProgress.done();
        console.log('Reader ready');
        $('.wrapper').css('visibility', 'visible');
        $(_this.mainElem).addClass('ready');
        _this.wheel.initialize();
        if (Modernizr.touch) {
          _this.swipe.initialize();
        }
        return $('a').each(function(i, el) {
          var $this;
          $this = $(el);
          if ($this.attr('href').match(/^#/)) {

          } else if ($this.attr('href').match(/^(?:\/|window.location.host)/)) {
            return $this.on('click', function() {
              return _this.destroy();
            });
          } else {
            return $this.attr('target', '_blank');
          }
        });
      };
    })(this));
    this.on('destroy', (function(_this) {
      return function() {
        return _this.destroy();
      };
    })(this));
    return window.onunload = window.onpopstate = (function(_this) {
      return function() {
        return _this.destroy();
      };
    })(this);
  };

  return Reader;

})();

window.Reader = Reader;

//# sourceMappingURL=data:application/json;base64,
