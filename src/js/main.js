var Reader;

Reader = (function() {
  function Reader(options) {
    this.options = options != null ? options : {};
    this.query = new this.Query();
    this.parse = new this.Parse();
    this.layout = new this.Layout();
    this.aspect = new this.Aspect();
    this.template = new this.Template();
    this.events = new this.Events();
    this["package"] = {
      attributes: null,
      guide: null,
      manifest: null,
      metadata: null,
      spine: null,
      text: null
    };
    this.location = {
      assets: this.options.assets || '',
      url: ("" + window.location.origin).replace(/\/$/, '')
    };
    this.nav = {
      elem: null,
      regexp: null,
      path: null,
      attribute: null
    };
    this.navMap = null;
    this.navUrl = null;
    this.ncx = null;
    this.navRe = null;
    this.html = [];
    this.metadata = [];
    this.navElem = document.getElementById('reader-nav');
    this.mainElem = document.getElementById('reader-frame');
    this.pagect = null;
    this.pagect = null;
    this.delay = 150;
  }

  Reader.prototype.getNavDocument = function(that) {
    return function(key, val, item) {
      if (key === that.nav.attribute && that.nav.regexp.test(val)) {
        that.nav.elem = item;
        that.nav.path = item.getAttribute('href');
        return that.xml();
      }
    };
  };

  Reader.prototype.renderPage = function(that) {
    return function(url, parentId, navId) {
      return that.query.html(that.location.assets + "/" + url).done(function(data) {
        var doc;
        doc = that.template.parse(data, that.location.assets);
        that.layout.render(doc, parentId, '#doc-nav');
        if (!(that.pagect -= 1)) {
          return that.trigger('pagesloaded', {});
        }
      });
    };
  };

  Reader.prototype.xml = function() {
    var curry;
    curry = this.renderPage(this);
    return this.query.xml(this.location.assets + "/" + this.nav.path).done((function(_this) {
      return function(data) {
        _this.ncx = _this.parse.nav(data);
        _this.navMap = _this.parse.mapNcx(_this.ncx.navMap.navPoint);
        return _this.layout.build(_this.navMap, curry, _this.mainElem.id);
      };
    })(this));
  };

  Reader.prototype.build = function(data) {
    var curry;
    curry = this.getNavDocument(this);
    return this.pagect = this.parse.xml(data, curry)["package"].spine.itemref.length;
  };

  Reader.prototype.on = function(handle, callback) {
    var evt;
    evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(handle, true, false, {});
    return this.mainElem.addEventListener(handle, callback);
  };

  Reader.prototype.trigger = function(handle, data) {
    return this.mainElem.dispatchEvent(new CustomEvent(handle, data));
  };

  Reader.prototype.initialize = function() {
    var attr, bounceResize, bounceReturnToPos, layoutcomplete, observer, target, token;
    token = this.options.toc ? 'nav' : 'ncx';
    attr = this.options.toc ? 'properties' : 'id';
    this.nav.regexp = new RegExp("^" + token + "$", 'i');
    this.nav.attribute = attr;
    this.query.xml(this.options.packageUrl).done((function(_this) {
      return function(data) {
        return _this.build(data);
      };
    })(this));
    layoutcomplete = false;
    observer = new MutationObserver((function(_this) {
      return function(mutations) {
        mutations.forEach(function(mutationRecord) {
          if (!layoutcomplete) {
            layoutcomplete = true;
            _this.trigger('layoutcomplete', {});
          }
        });
      };
    })(this));
    target = document.body;
    observer.observe(target, {
      childList: true,
      attributes: true,
      attributeFilter: ['style']
    });
    this.on('pagesloaded', (function(_this) {
      return function() {
        return console.log('Reader pagesloaded');
      };
    })(this));
    this.on('layoutcomplete', (function(_this) {
      return function() {
        console.log('Reader layoutcomplete');
        _this.events.frameWidth = _this.events.setFrameWidth();
        _this.events.colGap = _this.events.setColGap();
        _this.events.setArticlePos();
        _this.events.bindElems();
        return setTimeout(function() {
          return _this.trigger('ready', {});
        });
      };
    })(this));
    this.on('ready', (function(_this) {
      return function() {
        console.log('Reader ready');
        return $(_this.mainElem).css({
          opacity: 1
        });
      };
    })(this));
    bounceResize = this.events.debounce((function(_this) {
      return function() {
        _this.events.setColGap();
        _this.events.setFrameWidth();
        return _this.events.setArticlePos();
      };
    })(this), this.delay);
    bounceReturnToPos = this.events.debounce((function(_this) {
      return function() {
        return _this.events.returnToPos();
      };
    })(this), this.delay * 2);
    $(window).on('resize', bounceReturnToPos);
    return $(window).on('resize', bounceResize);
  };

  return Reader;

})();

window.Reader = Reader;

//# sourceMappingURL=data:application/json;base64,
